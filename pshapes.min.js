class pShape{constructor(t,e={}){const{radius:i=60,thickness:s=14,speed_x:h=2,speed_y:o=.75,number_of_sides:a=6,top_fill:n="red",bottom_fill:r="blue",side_fills:c=["yellow"],image_smoothing:_=!0,smoothing_quality:l="high",camera_direction:f={x:0,y:0,z:-1}}=e;if(this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=_,this.ctx.imageSmoothingQuality=l,this.radius=i,this.thickness=s,this.half_thickness=s/2,this.speed_x=h,this.speed_y=o,this.number_of_sides=Math.round(Math.min(100,Math.max(2,a))),this.top_fill=n,this.bottom_fill=r,this.camera_direction=f,this.resize(),this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height,this.polygon_points=this.generate_polygon_points(),this.top_face_points=new Array(this.number_of_sides),this.bottom_face_points=new Array(this.number_of_sides),1===c.length&&"string"==typeof c[0]&&c[0].endsWith(".png")){const t=c[0];this.side_fills=this.split_image(t,a)}else c.length<a&&(c.length>0?c.push(...new Array(a-c.length).fill(c[0])):c.push(...new Array(a-c.length).fill("red"))),this.side_fills=c.map((t=>{if("string"==typeof t&&t.endsWith(".png")){const e=new Image;return e.src=t,e}return t}));this.top_face_texture=new Image,"string"==typeof this.top_fill&&this.top_fill.endsWith(".png")?this.top_face_texture.src=this.top_fill:this.top_face_texture=null,this.bottom_face_texture=new Image,"string"==typeof this.bottom_fill&&this.bottom_fill.endsWith(".png")?this.bottom_face_texture.src=this.bottom_fill:this.bottom_face_texture=null,this.animate()}split_image(t,e){const i=new Image;i.src=t;const s=[];return i.onload=()=>{const t=i.width/e;for(let h=0;h<e;h++){const e=document.createElement("canvas"),o=e.getContext("2d");e.width=t,e.height=i.height,o.drawImage(i,h*t,0,t,i.height,0,0,t,i.height);const a=new Image;a.src=e.toDataURL(),s.push(a)}},s}animate(){this.render(),requestAnimationFrame((()=>this.animate()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height}generate_polygon_points(){const t=[];for(let e=0;e<this.number_of_sides;e++){const i=e/this.number_of_sides*2*Math.PI;t.push({x:this.radius*Math.cos(i),y:this.radius*Math.sin(i),z:0})}return t}rotate(t,e,i,s,h){let o=t.x,a=t.y*e-t.z*i,n=t.y*i+t.z*e;t.x=o*s+n*h,t.y=a,t.z=-o*h+n*s}project(t){t.x=t.x*this.aspect_ratio+this.center_x,t.y=t.y+this.center_y}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=performance.now()/1e3,e=t*this.speed_x,i=t*this.speed_y,s=Math.cos(e),h=Math.sin(e),o=Math.cos(i),a=Math.sin(i);for(let t=0;t<this.number_of_sides;t++){const e=this.polygon_points[t];this.top_face_points[t]={...e,z:this.half_thickness},this.bottom_face_points[t]={...e,z:-this.half_thickness}}this.top_face_points.forEach((t=>this.rotate(t,s,h,o,a))),this.bottom_face_points.forEach((t=>this.rotate(t,s,h,o,a))),this.top_face_points.forEach((t=>this.project(t))),this.bottom_face_points.forEach((t=>this.project(t)));const n=Math.cos(e)*Math.cos(i),r=n>0,c=n<0;this.draw_side_faces(this.top_face_points,this.bottom_face_points),c&&(this.draw_end_face(this.bottom_face_points,this.bottom_fill),this.bottom_face_texture&&this.draw_end_face_texture(this.bottom_face_points,this.bottom_face_texture,-this.half_thickness,s,h,o,a)),r&&(this.draw_end_face(this.top_face_points,this.top_fill),this.top_face_texture&&this.draw_end_face_texture(this.top_face_points,this.top_face_texture,this.half_thickness,s,h,o,a))}draw_end_face(t,e){const i=this.ctx;i.save(),i.beginPath(),i.moveTo(t[0].x,t[0].y),t.forEach((t=>{i.lineTo(t.x,t.y)})),i.closePath(),i.fillStyle=e,i.fill(),i.restore()}draw_end_face_texture(t,e,i,s,h,o,a){const n=[{x:-this.radius,y:-this.radius,z:i},{x:this.radius,y:-this.radius,z:i},{x:this.radius,y:this.radius,z:i},{x:-this.radius,y:this.radius,z:i}];n.forEach((t=>this.rotate(t,s,h,o,a))),n.forEach((t=>this.project(t)));const r=this.ctx;if(r.save(),r.beginPath(),r.moveTo(t[0].x,t[0].y),t.forEach((t=>r.lineTo(t.x,t.y))),r.closePath(),r.clip(),r.beginPath(),r.moveTo(n[0].x,n[0].y),n.forEach((t=>r.lineTo(t.x,t.y))),r.closePath(),r.fill(),e.complete&&e.width>0){const t=e.width,i=e.height,s=n[1].x-n[0].x,h=n[1].y-n[0].y,o=n[3].x-n[0].x,a=n[3].y-n[0].y;r.transform(s/t,h/t,o/i,a/i,n[0].x,n[0].y),r.drawImage(e,0,0)}r.restore()}draw_side_faces(t,e){for(let i=0;i<this.number_of_sides;i++){const s=t[i],h=t[(i+1)%this.number_of_sides],o=e[i],a=e[(i+1)%this.number_of_sides],n={x:h.x-s.x,y:h.y-s.y,z:h.z-s.z},r={x:o.x-s.x,y:o.y-s.y,z:o.z-s.z},c={x:n.y*r.z-n.z*r.y,y:n.z*r.x-n.x*r.z,z:n.x*r.y-n.y*r.x},_=Math.sqrt(c.x**2+c.y**2+c.z**2);c.x/=_,c.y/=_,c.z/=_;if(c.x*this.camera_direction.x+c.y*this.camera_direction.y+c.z*this.camera_direction.z>0){const t=this.side_fills[i];t instanceof Image?this.draw_side_face_texture(s,h,o,a,t,null):this.draw_side_face_texture(s,h,o,a,null,t)}}}draw_side_face_texture(t,e,i,s,h,o){const a=this.ctx,n=new Path2D;if(n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.lineTo(s.x,s.y),n.lineTo(i.x,i.y),n.closePath(),h instanceof Image&&h.complete&&h.width>0){a.save(),a.beginPath(),a.moveTo(t.x,t.y),[t,e,s,i].forEach((t=>{a.lineTo(t.x,t.y)})),a.closePath(),a.clip(),a.fillStyle=o,a.fill();const n=h.width,r=h.height,c=e.x-t.x,_=e.y-t.y,l=i.x-t.x,f=i.y-t.y;a.transform(c/n,_/n,l/r,f/r,t.x,t.y),a.drawImage(h,0,0),a.restore()}else a.fillStyle=o,a.fill(n)}}function create_shape(t,e){return new pShape(t,e)}window.addEventListener("resize",(function(){new pShape("canvas").resize()}));